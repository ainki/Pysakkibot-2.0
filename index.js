// index.js

// Importit
const bot = require('./bot');
const replyMarkup = require('./lib/flow/nappaimisto');
const hae = require('./lib/functions/hae');
const sijainti = require('./lib/functions/sijainti');
const linja = require('./lib/functions/linja');
const poikkeus = require('./lib/functions/poikkeus');
const pysakkiCheck = require('./lib/functions/pysakkiCheck');
const pysakki = require('./lib/functions/pysakki');
const liitynta = require('./lib/functions/liitynta');
const reitti = require('./lib/functions/reitti');

let viimekomento = "";
// npm
require('console-stamp')(console, 'HH:MM:ss'); //Aikaleimat logiin
// chatbase
var chatbase = require('@google/chatbase')

const set = chatbase.newMessageSet()
	// The following are optional setters which will produce new messages with
	// the corresponding fields already set!
	.setApiKey(process.env.chatbasetoken)
  .setPlatform('Telegram')
  .setVersion('V1.0');

// Logaa jokaisen sis√§√§ntulevan viestin consoliin
bot.on('text', function (msg) {
  console.log(`[text] ${msg.chat.id}: ${msg.text}`);

  // Chatbase analytics
  set.newMessage()
	.setMessage(`${msg.text}`)
	.setUserId(`${msg.chat.id}`)
  .setClientTimeout(10000)
  
  set.sendMessageSet()
	.then(set => {
		// The API accepted our request!
		console.log(set.getCreateResponse());
	})
	.catch(error => {
		// Something went wrong!
		console.error(error);
	})

});

//Peruskomennot

bot.on('/start', (msg) => {
  viimekomento = "/start";
  //L√§hett√§√§ viestin ja n√§pp√§imist√∂n
  bot.sendMessage(msg.chat.id, `<b>Hei, ${msg.from.first_name}! Tervetuloa k√§ytt√§m√§√§n Pys√§kkibottia!</b>\n\n/hae\nHae aikatauluja pys√§kin mukaan. Kirjoita pys√§kin nimi tai koodia ja saat pys√§kin seuraavat 10 l√§ht√∂√§.\n\n/reitti  üÜï\nHae reittiohjeita paikasta A paikkaan B. Anna vain l√§ht√∂paikka ja m√§√§r√§np√§√§!\n\n/linja\nHae l√§h√∂j√§ tietylle linjalle tietylt√§ pys√§kilt√§.\n\n/liitynta\nHae liitynt√§pys√§k√∂innin tietoja. Realiaikainen data saavilla vasta muutamilla pys√§k√∂intialueella.\n\n/pysakki\nHae aikatauluja ja pys√§kin sijaintia pys√§kin nimen tai koodin perusteella.\n\nVoit my√∂s l√§hett√§√§ sijaintisi ja saat l√§hist√∂n seuraavat l√§hd√∂t.\n\nJos tarvitset lis√§√§ apua tee /help! üòÑ\n\n<b>Kiitos kun k√§yt√§t Pys√§kkibottia!</b>`, { replyMarkup, parseMode: 'html' }); //Vastaa kun k√§ytt√§j√§ k√§ytt√§√§ /start komentoa
  return console.info("Start viesti l√§hetetty!");
});

bot.on('/help', (msg) => {
  viimekomento = "/help";
  //L√§hett√§√§ viestin
  bot.sendMessage(msg.chat.id, `Hei ${msg.from.first_name}. T√§√§lt√§ saa lis√§tietoa!\n\nKomennot:\n\n/hae - Etsi aikatauluja pys√§kin mukaan. Voit joko hakea pys√§kkej√§ nimen mukaan tai k√§ytt√§√§ pys√§kin koodia. Esim: "/hae niittykumpu" tai "/hae E4210"\n\n /pysakki ja /pys - Pys√§kin sijainti ja aikataulu. Voit joko hakea pys√§kkej√§ nimen mukaan tai k√§ytt√§√§ pys√§kin koodia: "/pys Kauklahti" tai "/pysakki E4444" \n\n/linja - Etsi aikatauluja linjan perusteella. Anna ensinm√§iseksi linjan tunnus, valitse m√§√§r√§np√§√§ ja pys√§kki. Saat seuraavat l√§hd√∂t linjalle pys√§kilt√§.\n\n/liitynta - Etsi liitynt√§pys√§k√∂intipaikkoja. Esim. "/liitynta Niittykumpu", "/liitynta Hansatie" \n\nVoit l√§hett√§√§ my√∂s sijainnin ja saat l√§hist√∂lt√§ seuraavat l√§hd√∂t.\n\nSelitteet:\n12:00‚Ä¢‚Äå   = Reaaliaikainen l√§ht√∂aika\n12:00!   = Muutoksia reitiss√§\n12:00√ó‚Äå  = Vuoro on peruttu\n00:23‚Å∫¬π‚Äå‚Äå‚Äé = Vuoro l√§htee seuraavana p√§iv√§n√§ \n\nJos l√∂yd√§t bugin tai jotain ep√§tavallista voit reportoida sen kehitt√§jille: https://bit.ly/2K3GJw1 \n\nMukavaa matkaa! üòä`);
  return console.info("Help viesti l√§hetetty!");
});

bot.on('/menu', msg => {
  viimekomento = '/menu';
  //L√§hett√§√§ viestin ja n√§pp√§imist√∂n
  bot.sendMessage(msg.chat.id, 'Valitse toiminto', { replyMarkup });
  return console.info("Menu avattu!");
});

bot.on('/hae', msg => {
  viimekomento = '/hae';
  return hae(msg.chat.id, msg.text);
});

bot.on('/linja', msg => {
  viimekomento = '/linja';
  return linja(msg.chat.id, msg.text);
});

bot.on('/poikkeukset', msg => {
  viimekomento = '/poikkeukset';
  return poikkeus(msg.chat.id, msg.text);
});

bot.on(['location'], (msg, self) => {
  viimekomento = 'location';
  return sijainti(msg.chat.id, msg.location);
});

bot.on('/pys', (msg) => {
  viimekomento = '/pys';
  //L√§hett√§√§ viestin ja n√§pp√§imist√∂n
  return pysakki(msg.chat.id, msg.text);
});

bot.on('/pysakki', (msg) => {
  viimekomento = '/pysakki';
  //L√§hett√§√§ viestin ja n√§pp√§imist√∂n
  return pysakki(msg.chat.id, msg.text);
});

bot.on('/liitynta', (msg) => {
  viimekomento = "/liitynta";
  //L√§hett√§√§ viestin
  return liitynta(msg.chat.id, msg.text);
});

bot.on('/reitti', (msg) => {
  viimekomento = "/reitti";
  //L√§hett√§√§ viestin
  return reitti(msg);
});

bot.on('*', msg => {
  if (typeof (msg.text) === "string") {
    setTimeout(function () {
      return pysakkiCheck(msg.chat.id, msg.text, viimekomento);
    }, 10);
  }
});


bot.start();
